{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* eslint-disable func-names */\n\nvar SvgDrawPlugin = function SvgDrawPlugin(target, vars) {\n  this.target = target;\n  this.vars = vars;\n  this.start = {};\n  this.tagName = this.target.tagName.toLowerCase();\n};\n\nSvgDrawPlugin.prototype = {\n  name: 'SVGDraw',\n  useStyle: 'stroke-dasharray, stroke-dashoffset',\n  setVars: function setVars(vars) {\n    var _vars = {\n      start: 0\n    };\n\n    if (typeof vars === 'number') {\n      _vars.end = vars;\n      return _vars;\n    }\n\n    var data = vars.split(' ');\n\n    if (data.length > 1) {\n      _vars.start = data[0].indexOf('%') >= 0 ? parseFloat(data[0]) / 100 * this.length : parseFloat(data[0]);\n      _vars.end = data[1].indexOf('%') >= 0 ? parseFloat(data[1]) / 100 * this.length : parseFloat(data[1]);\n    } else if (parseFloat(vars)) {\n      _vars.end = vars.indexOf('%') >= 0 ? parseFloat(vars) / 100 * this.length : parseFloat(vars);\n    } else {\n      throw new Error('SVGDraw data[' + vars + '] error.');\n    }\n\n    return _vars;\n  },\n  getLineLength: function getLineLength(x1, y1, x2, y2) {\n    var _x2 = parseFloat(x2) - parseFloat(x1);\n\n    var _y2 = parseFloat(y2) - parseFloat(y1);\n\n    return Math.sqrt(_x2 * _x2 + _y2 * _y2);\n  },\n  getPolyLength: function getPolyLength(name) {\n    var _this = this; // .match(/(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/gi)\n\n\n    var pointsArray = [];\n    (this.target.getAttribute('points') || '').split(/[\\s+|,]/).forEach(function (item, i) {\n      var arr = pointsArray[Math.floor(i / 2)] || [];\n      arr.push(parseFloat(item));\n\n      if (!(i % 2)) {\n        pointsArray.push(arr);\n      }\n    });\n\n    if (name === 'polygon') {\n      pointsArray.push(pointsArray[0]);\n    }\n\n    var length = 0;\n    pointsArray.forEach(function (item, i) {\n      if (i < pointsArray.length - 1) {\n        var nextPoint = pointsArray[i + 1];\n        length += _this.getLineLength(item[0], item[1], nextPoint[0], nextPoint[1]);\n      }\n    });\n    return length;\n  },\n  getEllipseLength: function getEllipseLength() {\n    var rx = parseFloat(this.target.getAttribute('rx'));\n    var ry = parseFloat(this.target.getAttribute('ry'));\n\n    if (!rx || !ry) {\n      throw new Error('ellipse rx or ry error.');\n    }\n\n    return Math.PI * (3 * (rx + ry) - Math.sqrt((3 * rx + ry) * (3 * ry + rx)));\n  },\n  getAnimStart: function getAnimStart(computedStyle) {\n    var _this2 = this;\n\n    if (Object.keys(this.start).length) {\n      return;\n    }\n\n    var getAttribute = function getAttribute(str) {\n      return _this2.target.getAttribute(str);\n    };\n\n    switch (this.tagName) {\n      case 'circle':\n        this.length = Math.PI * 2 * getAttribute('r');\n        break;\n\n      case 'line':\n        this.length = this.getLineLength(getAttribute('x1'), getAttribute('y1'), getAttribute('x2'), getAttribute('y2'));\n        break;\n\n      case 'polyline':\n      case 'polygon':\n        this.length = this.getPolyLength(this.tagName);\n        break;\n\n      case 'ellipse':\n        this.length = this.getEllipseLength();\n        break;\n\n      case 'rect':\n        this.length = getAttribute('width') * 2 + getAttribute('height') * 2;\n        break;\n\n      case 'path':\n        this.length = this.target.getTotalLength();\n        break;\n\n      default:\n        throw new Error('The label is not a label in the SVG.');\n    }\n\n    this.length = parseFloat(this.length.toFixed(3));\n    this.start.strokeDasharray = computedStyle.strokeDasharray === 'none' || !computedStyle.strokeDasharray ? '100% 100%' : computedStyle.strokeDasharray;\n    this.start.strokeDashoffset = parseFloat(computedStyle.strokeDashoffset);\n    this.start.strokeDasharray = this.setVars(this.start.strokeDasharray);\n    this.vars = this.setVars(this.vars);\n  },\n  setRatio: function setRatio(r, t) {\n    t.style.strokeDasharray = (this.vars.end - this.vars.start - this.start.strokeDasharray.start) * r + this.start.strokeDasharray.start + 'px, ' + this.length + 'px';\n    t.style.strokeDashoffset = -((this.vars.start + this.start.strokeDashoffset) * r - this.start.strokeDashoffset);\n  }\n};\nexports['default'] = SvgDrawPlugin;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/home/sparker15/Auto-main/node_modules/rc-tween-one/lib/plugin/SvgDrawPlugin.js"],"names":["Object","defineProperty","exports","value","SvgDrawPlugin","target","vars","start","tagName","toLowerCase","prototype","name","useStyle","setVars","_vars","end","data","split","length","indexOf","parseFloat","Error","getLineLength","x1","y1","x2","y2","_x2","_y2","Math","sqrt","getPolyLength","_this","pointsArray","getAttribute","forEach","item","i","arr","floor","push","nextPoint","getEllipseLength","rx","ry","PI","getAnimStart","computedStyle","_this2","keys","str","getTotalLength","toFixed","strokeDasharray","strokeDashoffset","setRatio","r","t","style","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* eslint-disable func-names */\nvar SvgDrawPlugin = function SvgDrawPlugin(target, vars) {\n  this.target = target;\n  this.vars = vars;\n  this.start = {};\n  this.tagName = this.target.tagName.toLowerCase();\n};\nSvgDrawPlugin.prototype = {\n  name: 'SVGDraw',\n  useStyle: 'stroke-dasharray, stroke-dashoffset',\n  setVars: function setVars(vars) {\n    var _vars = { start: 0 };\n    if (typeof vars === 'number') {\n      _vars.end = vars;\n      return _vars;\n    }\n    var data = vars.split(' ');\n    if (data.length > 1) {\n      _vars.start = data[0].indexOf('%') >= 0 ? parseFloat(data[0]) / 100 * this.length : parseFloat(data[0]);\n      _vars.end = data[1].indexOf('%') >= 0 ? parseFloat(data[1]) / 100 * this.length : parseFloat(data[1]);\n    } else if (parseFloat(vars)) {\n      _vars.end = vars.indexOf('%') >= 0 ? parseFloat(vars) / 100 * this.length : parseFloat(vars);\n    } else {\n      throw new Error('SVGDraw data[' + vars + '] error.');\n    }\n    return _vars;\n  },\n  getLineLength: function getLineLength(x1, y1, x2, y2) {\n    var _x2 = parseFloat(x2) - parseFloat(x1);\n    var _y2 = parseFloat(y2) - parseFloat(y1);\n    return Math.sqrt(_x2 * _x2 + _y2 * _y2);\n  },\n  getPolyLength: function getPolyLength(name) {\n    var _this = this;\n\n    // .match(/(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/gi)\n    var pointsArray = [];\n    (this.target.getAttribute('points') || '').split(/[\\s+|,]/).forEach(function (item, i) {\n      var arr = pointsArray[Math.floor(i / 2)] || [];\n      arr.push(parseFloat(item));\n      if (!(i % 2)) {\n        pointsArray.push(arr);\n      }\n    });\n    if (name === 'polygon') {\n      pointsArray.push(pointsArray[0]);\n    }\n    var length = 0;\n    pointsArray.forEach(function (item, i) {\n      if (i < pointsArray.length - 1) {\n        var nextPoint = pointsArray[i + 1];\n        length += _this.getLineLength(item[0], item[1], nextPoint[0], nextPoint[1]);\n      }\n    });\n    return length;\n  },\n  getEllipseLength: function getEllipseLength() {\n    var rx = parseFloat(this.target.getAttribute('rx'));\n    var ry = parseFloat(this.target.getAttribute('ry'));\n    if (!rx || !ry) {\n      throw new Error('ellipse rx or ry error.');\n    }\n    return Math.PI * (3 * (rx + ry) - Math.sqrt((3 * rx + ry) * (3 * ry + rx)));\n  },\n  getAnimStart: function getAnimStart(computedStyle) {\n    var _this2 = this;\n\n    if (Object.keys(this.start).length) {\n      return;\n    }\n    var getAttribute = function getAttribute(str) {\n      return _this2.target.getAttribute(str);\n    };\n    switch (this.tagName) {\n      case 'circle':\n        this.length = Math.PI * 2 * getAttribute('r');\n        break;\n      case 'line':\n        this.length = this.getLineLength(getAttribute('x1'), getAttribute('y1'), getAttribute('x2'), getAttribute('y2'));\n        break;\n      case 'polyline':\n      case 'polygon':\n        this.length = this.getPolyLength(this.tagName);\n        break;\n      case 'ellipse':\n        this.length = this.getEllipseLength();\n        break;\n      case 'rect':\n        this.length = getAttribute('width') * 2 + getAttribute('height') * 2;\n        break;\n      case 'path':\n        this.length = this.target.getTotalLength();\n        break;\n      default:\n        throw new Error('The label is not a label in the SVG.');\n    }\n    this.length = parseFloat(this.length.toFixed(3));\n    this.start.strokeDasharray = computedStyle.strokeDasharray === 'none' || !computedStyle.strokeDasharray ? '100% 100%' : computedStyle.strokeDasharray;\n    this.start.strokeDashoffset = parseFloat(computedStyle.strokeDashoffset);\n    this.start.strokeDasharray = this.setVars(this.start.strokeDasharray);\n    this.vars = this.setVars(this.vars);\n  },\n  setRatio: function setRatio(r, t) {\n    t.style.strokeDasharray = (this.vars.end - this.vars.start - this.start.strokeDasharray.start) * r + this.start.strokeDasharray.start + 'px, ' + this.length + 'px';\n    t.style.strokeDashoffset = -((this.vars.start + this.start.strokeDashoffset) * r - this.start.strokeDashoffset);\n  }\n};\nexports['default'] = SvgDrawPlugin;\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}